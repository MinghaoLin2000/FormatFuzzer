//------------------------------------------------
//--- 010 Editor v2.0 Binary Template
//
//      File: BMP.bt
//    Author: SweetScape Software
//   Version: 2.3
//   Purpose: Parse BMP image files.
//  Category: Image
// File Mask: *.bmp
//  ID Bytes: 42 4D //BM
//   History:  
//   2.3   2016-02-26 SweetScape: Allow negative heights.
//   2.2   2015-10-13 SweetScape: Updated header for repository submission.
//   2.1   SweetScape: Bug fix for ReadRGBQUAD function.
//   2.0   SweetScape: Added read functions.
//   1.0   SweetScape: Initial release.
//
// More information available at
//  https://en.wikipedia.org/wiki/BMP_file_format
//------------------------------------------------

// Define structures used in BMP files

typedef enum < DWORD > compressions1bpp {
	BI_RGB_1 = 0x0000,
} E_COMPRESSIONS1BPP;

typedef enum < DWORD > compressions2bpp {
	BI_RGB_2 = 0x0000,
} E_COMPRESSIONS2BPP;

typedef enum < DWORD > compressions4bpp {
	BI_RGB_4 = 0x0000,
	BI_RLE4_4 = 0x0002, //only 4 bit per pixel
} E_COMPRESSIONS4BPP;

typedef enum < DWORD > compressions8bpp {
	BI_RGB_8 = 0x0000,
	BI_RLE8_8 = 0x0001, //only 8 bit per pixel
} E_COMPRESSIONS8BPP;

typedef enum < DWORD > compressions16bpp {//always stored uncompressed
	BI_RGB_16 = 0x0000,
	//BI_BITFIELDS_16 = 0x0003, //only 16 and 32 bit per pixel //TODO implement bitfields
} E_COMPRESSIONS16BPP;

typedef enum < DWORD > compressions24bpp {
	BI_RGB_24 = 0x0000,
} E_COMPRESSIONS24BPP;

typedef enum < DWORD > compressions32bpp { //always stored uncompressed
	BI_RGB_32 = 0x0000,
	//BI_BITFIELDS_32 = 0x0003, //only 16 and 32 bit per pixel
} E_COMPRESSIONS32BPP;

typedef enum < WORD > bpp {
	One = 1,
//	Two = 2,
	Four = 4, //TODO 30%
	Eight = 8, //TODO 8%
	Sixteen = 16,
	Twentyfour = 24,
	Thirtytwo = 32,
} E_BPP;

typedef struct {   // bmfh
	local int evil = SetEvilBit(false);
    CHAR    bfType[2] = {"BM"};
	SetEvilBit(evil);
    DWORD   bfSize; //fixed at the end of binary template
    WORD    bfReserved1 = { 0x0 };
    WORD    bfReserved2 = { 0x0 };
    DWORD   bfOffBits; //An integer (unsigned) representing the offset of actual pixel data in bytes. In nutshell:- it is the number of bytes between start of the file (0) and the first byte of the pixel data. TODO fix after creation if needed
} BITMAPFILEHEADER;

typedef struct {    // bmih
    DWORD   biSize = { 40 };
    LONG    biWidth <min=1>;
    LONG    biHeight <min=1>;
    WORD    biPlanes = { 1 };	
    E_BPP    biBitCount;	
	if(biBitCount == 1 ){
		E_COMPRESSIONS1BPP biCompression;
	}
	if(biBitCount == 2 ){
		E_COMPRESSIONS2BPP biCompression;
	}
	if(biBitCount == 4 ){
		E_COMPRESSIONS4BPP biCompression;
	}
	if(biBitCount == 8 ){
		E_COMPRESSIONS8BPP biCompression;
	}
	if(biBitCount == 16 ){
		E_COMPRESSIONS16BPP biCompression;
	}
	if(biBitCount == 24 ){
		E_COMPRESSIONS24BPP biCompression;
	}
	if(biBitCount == 32 ){
		E_COMPRESSIONS32BPP biCompression;
	}
	if(biCompression == 0 || biCompression == 11){ //Size after compression set to 0 if no compression is used
		DWORD biSizeImage = { 0 };
	}
	else{	
		DWORD biSizeImage; //TODO if needed calculate decompressed size
	}
    LONG    biXPelsPerMeter = { 0 };
    LONG    biYPelsPerMeter = { 0 };
	switch(biBitCount){
		
		case 8:
			DWORD biClrUsed <max=256>;
			break;

		case 4:
			DWORD biClrUsed = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
			break;
	
		case 2:
			DWORD biClrUsed = { 0, 1, 2, 3, 4 };
			break;

		case 1:
			DWORD biClrUsed = { 0, 1, 2 };
			break;

		default:
			DWORD   biClrUsed = { 0 };
	}
    DWORD   biClrImportant = { 0 };
} BITMAPINFOHEADER;

typedef struct {   // rgbq
    UBYTE   rgbBlue;
    UBYTE   rgbGreen;
    UBYTE   rgbRed;
    UBYTE   rgbReserved = { 0 };
} RGBQUAD <read=ReadRGBQUAD>;

typedef struct {   // rgbt
    UBYTE   rgbBlue;
    UBYTE   rgbGreen;
    UBYTE   rgbRed;
} RGBTRIPLE <read=ReadRGBTRIPLE>;

typedef struct {   // rgba
    UBYTE   rgbBlue;
    UBYTE   rgbGreen;
    UBYTE   rgbRed;
	UBYTE	alphamaskFlag;
} RGBALPHA;

//---------------------------------------------
// Custom read functions for color types - this allows the
//  color to be displayed without having to open up the structure.

string ReadRGBQUAD( RGBQUAD &a )
{
    string s;
    SPrintf( s, "#%02X%02X%02X%02X", a.rgbReserved, a.rgbRed, a.rgbGreen, a.rgbBlue );
    return s;
}

string ReadRGBTRIPLE( RGBTRIPLE &a )
{
    string s;
    SPrintf( s, "#%02X%02X%02X", a.rgbRed, a.rgbGreen, a.rgbBlue );
    return s;
}

//---------------------------------------------

// Define the headers
LittleEndian(); 
SetBackColor( cLtGray );
BITMAPFILEHEADER bmfh;
BITMAPINFOHEADER bmih;

// Check for header
if( bmfh.bfType != "BM" )
{
    Warning( "File is not a bitmap. Template stopped." );
    return -1;
}

// Define the color table only when biBitCount <= 8 TODO fix insufficient image data bug (color map size) bmp.c line 947 in ImageMagick
if( (bmih.biBitCount != 16) && (bmih.biBitCount != 24) && (bmih.biBitCount != 32) )
{
    SetBackColor( cLtAqua );
    if( bmih.biClrUsed > 0 )
        RGBQUAD aColors[ bmih.biClrUsed ];
    else
        RGBQUAD aColors[ 1 << bmih.biBitCount ];
}
//Fixing offset
local int evil = SetEvilBit(false);
local DWORD current_pos = FTell();
FSeek(10);//fix offset to pixel data
DWORD real_offset = { current_pos };
FSeek( current_pos );
SetEvilBit(evil);

// Define the bytes of the data
SetBackColor( cNone );
if( bmih.biCompression > 0 )
{
    // Bytes are compressed
    if( bmih.biSizeImage > 0 )
        UBYTE rleData[ bmih.biSizeImage ];
    else
        UBYTE rleData[ bmfh.bfSize - FTell() ];
}
else
{
    // Calculate bytes per line and padding required
    local int bytesPerLine = ( bmih.biWidth * bmih.biBitCount + 7 ) / 8;
    local int padding      = 4 - (bytesPerLine % 4);
    if( padding == 4 )
        padding = 0;

    // Define each line of the image
    struct BITMAPLINE {

        // Define color data
        if( bmih.biBitCount < 8 )
             UBYTE     imageData[ bytesPerLine ];
        else if( bmih.biBitCount == 8 )
             UBYTE     colorIndex[ bmih.biWidth ];
		else if( bmih.biBitCount == 16 )
             RGBALPHA  colors[ bmih.biWidth ];
        else if( bmih.biBitCount == 24 )
             RGBTRIPLE colors[ bmih.biWidth ];
        else if( bmih.biBitCount == 32 )
             RGBQUAD   colors[ bmih.biWidth ];

        // Pad if necessary        
        if( padding != 0 )
             UBYTE padBytes[ padding ];

    } lines[ (bmih.biHeight < 0) ? -bmih.biHeight : bmih.biHeight] <optimize=true>;
} 

// adding file size to header, needed to be parsed
local int evil = SetEvilBit(false);
local int file_size = FTell();
FSeek(2);//fix size
LONG real_hsize = { file_size };
