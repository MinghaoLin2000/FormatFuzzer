enum <ubyte> block_type_ENUM{
  extension = 0x21,
  local_image_descriptor = 0x2c,
  end_of_file = 0x3b
};


enum <ubyte> extension_label_ENUM{
  graphic_control = 0xf9,
  comment = 0xfe,
  application = 0xff
};


struct header_TYPE ;
struct logical_screen_descriptor_struct_TYPE ;
struct color_table_TYPE ;
struct color_table_entry_TYPE ;
struct block_TYPE ;
struct local_image_descriptor_TYPE ;
struct image_data_TYPE ;
struct extension_TYPE ;
struct ext_application_TYPE ;
struct ext_graphic_control_TYPE ;
struct subblocks_TYPE ;
struct subblock_TYPE ;
struct application_id_TYPE ;
struct header_TYPE {
    //     https://www.w3.org/Graphics/GIF/spec-gif89a.txt - section 17
    byte magic[3];
    if (magic[0] != 0x47 ||
        magic[1] != 0x49 ||
        magic[2] != 0x46) {
         Warning("Magic Bytes of magic not matching!");
         return -1;
    };
    char version[3];
};

struct logical_screen_descriptor_struct_TYPE {
    //     https://www.w3.org/Graphics/GIF/spec-gif89a.txt - section 18
    uint16 screen_width;
    uint16 screen_height;
    ubyte flags;
    ubyte bg_color_index;
    ubyte pixel_aspect_ratio;
    local int64 has_color_table = (flags & 0x80) != 0;
    local int64 color_table_size = 2 << (flags & 7);
};aaaaaaaaaaaaaaaa

struct color_table_TYPE(int32 lenght_CONVERTER) {
    //     https://www.w3.org/Graphics/GIF/spec-gif89a.txt - section 19
//     repeat: eos PLACEHOLDER<=======
};

struct color_table_entry_TYPE {
    ubyte red;
    ubyte green;
    ubyte blue;
};

struct block_TYPE {
    block_type_ENUM block_type;
     switch(block_type) {
         case extension:
             extension_TYPE body;
             break;
         case local_image_descriptor:
             local_image_descriptor_TYPE body;
             break;
    }
};

struct local_image_descriptor_TYPE {
    uint16 left;
    uint16 top;
    uint16 width;
    uint16 height;
    ubyte flags;
    if (has_color_table) {
    color_table_TYPE local_color_table;
     }
    image_data_TYPE image_data;
    local int64 has_color_table = (flags & 0x80) != 0;
    local int64 has_interlace = (flags & 0x40) != 0;
    local int64 has_sorted_color_table = (flags & 0x20) != 0;
    local int64 color_table_size = 2 << (flags & 7);
};

struct image_data_TYPE {
    //     https://www.w3.org/Graphics/GIF/spec-gif89a.txt - section 22
    ubyte lzw_min_code_size;
    subblocks_TYPE subblocks;
};

struct extension_TYPE {
    extension_label_ENUM label;
     switch(label) {
         case application:
             ext_application_TYPE body(lenght_CONVERTER);
             break;
         case comment:
             subblocks_TYPE body(lenght_CONVERTER);
             break;
         case graphic_control:
             ext_graphic_control_TYPE body;
             break;
         default:
             subblocks_TYPE body(lenght_CONVERTER);
             break;
    }
};

struct ext_application_TYPE {
    application_id_TYPE application_id;
    subblock_TYPE subblocks;
    while (!(subblocks.len_bytes == 0)) {
        subblock_TYPE subblocks;
    }
};

struct ext_graphic_control_TYPE {
    //     https://www.w3.org/Graphics/GIF/spec-gif89a.txt - section 23
    byte block_size[1];
    if (block_size[0] != 0x4 ||
        block_size[0] != 0x4) {
         Warning("Magic Bytes of block_size not matching!");
         return -1;
    };
    ubyte flags;
    uint16 delay_time;
    ubyte transparent_idx;
    byte terminator[1];
    if (terminator[0] != 0x0 ||
        terminator[0] != 0x0) {
         Warning("Magic Bytes of terminator not matching!");
         return -1;
    };
    local int64 transparent_color_flag = (flags & 0x1) != 0;
    local int64 user_input_flag = (flags & 0x2) != 0;
};

struct subblocks_TYPE {
    subblock_TYPE entries;
    while (!(entries.len_bytes == 0)) {
        subblock_TYPE entries;
    }
};

struct subblock_TYPE {
    ubyte len_bytes;
    byte bytes[len_bytes];
};

struct application_id_TYPE {
    ubyte len_bytes;
    char application_identifier[8];
    byte application_auth_code[3];
};

    header_TYPE hdr;
    logical_screen_descriptor_struct_TYPE logical_screen_descriptor;
    if (logical_screen_descriptor.has_color_table) {
    color_table_TYPE global_color_table;
     }
    block_TYPE blocks;
    while (!(FTell()==FileSize() || blocks.block_type == end_of_file)) {
        block_TYPE blocks;
    }